typeset [ {+|-}AEFHUafghklprtuxmz ] [ -LRZi [ n ]] [ name[=value] ... ]
typeset -T [ {+|-}Urux ] [ -LRZ [ n ]] SCALAR[=value] array [ sep ]
       Set or display attributes and values for shell parameters.

       A  parameter  is  created  for each name that does not already refer to one.  When inside a function, a new parameter 
       that already exist), and is unset again when the function completes.  See `Local Parameters' in zshparam(1).  The same
       ters, which retain their special attributes when made local.

       For each name=value assignment, the parameter name is set to value.  Note that arrays currently cannot be assigned in 
       integers.  Unless the option KSH TYPESET is set, normal expansion rules apply to assignment arguments, so value may be
       option is set, assignments which can be recognised when expansion is performed are treated as single words.  For examp
       two) is treated as having one argument if KSH TYPESET is set, but otherwise is treated as having the two arguments vbl

       If the shell option TYPESET SILENT is not set, for each remaining name that refers to a parameter that is set, the nam
       printed  in  the form of an assignment.  Nothing is printed for newly-created parameters, or when any attribute flags 
       name.  Using `+' instead of minus to introduce an attribute turns it off.

       If the -p option is given, parameters and values are printed in the form of a typeset command and an assignment  (whic
       arrays  and associative arrays), regardless of other flags and options.  Note that the -h flag on parameters is respec
       parameters.

       If the -T option is given, two or three arguments must be present (an exception is that zero arguments are allowed to 
       in  this  fashion).   The  first  two are the name of a scalar and an array parameter (in that order) that will be tie
       $path.  The optional third argument is a single-character separator which will be used to join the elements of the arr
       colon  is  used, as with $PATH.  Only the first character of the separator is significant; any remaining characters ar
       may be assigned an initial value.  Both the scalar and the array may otherwise be manipulated as normal.  If one is un
       unset  too.   There  is no way of untying the variables without unsetting them, or converting the type of one of them 
       not work, assigning an array to SCALAR is an error, and assigning a scalar to array sets it to be a single-element arr
       and  `export  -T  ...'  work,  but  only the scalar will be marked for export.  Setting the value using the scalar ver
       (which cannot be quoted).  It is possible to use the same two tied variables with a different separator character in w
       as before but the separator is changed.  This flag has a different meaning when used with -f; see below.

       The  -g (global) flag is treated specially: it means that any resulting parameter will not be restricted to local scop
       ily mean that the parameter will be global, as the flag will apply to any existing parameter (even if unset) from an e
       not  affect  the parameter after creation, hence it has no effect when listing existing parameters, nor does the flag 
       tion with -m (see below).

       If no name is present, the names and values of all parameters are printed.  In this case the attribute flags restrict 
       that  have  the  specified attributes, and using `+' rather than `-' to introduce the flag suppresses printing of the 
       parameter name.  Also, if the last option is the word `+', then names are printed but values are not.

       If the -m flag is given the name arguments are taken as patterns (which should be quoted).  With no attribute flags, a
       -f flag) with matching names are printed (the shell option TYPESET SILENT is not used in this case).  Note that -m is 
       the +g flag is combined with -m, a new local parameter is created for every matching parameter that is not already loc
       flags  or assignments to the existing parameters.  Except when assignments are made with name=value, using +m forces t
       even inside a function.

       If no attribute flags are given and either no -m flag is present or the +m form was used, each parameter  name  printe
       attributes  of  that  parameter  (array, association, exported, integer, readonly).  If +m is used with attribute flag
       with +, the matching parameter names are printed but their values are not.

       Attribute flags that transform the final value (-L, -R, -Z, -l, u) are only applied to the expanded value at the point
       using `$'.  They are not applied when a parameter is retrieved internally by the shell for any purpose.

       The following attribute flags may be specified:

       -A     The names refer to associative array parameters; see `Array Parameters' in zshparam(1).

       -L     Left  justify  and  remove leading blanks from value.  If n is nonzero, it defines the width of the field.  If 
              the width of the value of the first assignment.  In the case of numeric parameters, the length of the complete 
              used to determine the width, not the value that would be output.

              The  width  is  the  count of characters, which may be multibyte characters if the MULTIBYTE option is in effec
              character is not taken into account; if this is required, use padding with parameter expansion flags ${(ml...).
              sion Flags' in zshexpn(1).

              When the parameter is expanded, it is filled on the right with blanks or truncated if necessary to fit the fiel
              pected results with numeric parameters.  Leading zeros are removed if the -Z flag is also set.

       -R     Similar to -L, except that right justification is used; when the parameter is expanded, the field is left fille
              end.  May not be combined with the -Z flag.

       -U     For arrays (but not for associative arrays), keep only the first occurrence of each duplicated value.  This may
              cial parameters like PATH or FIGNORE, etc.  This flag has a different meaning when used with -f; see below.

       -Z     Specially handled if set along with the -L flag.  Otherwise, similar to -R, except that leading zeros are used 
              first  non-blank  character  is a digit.  Numeric parameters are specially handled: they are always eligible fo
              are inserted at an appropriate place in the output.

       -a     The names refer to array parameters.  An array parameter may be created this way, but it may not be assigned to
              playing, both normal and associative arrays are shown.

       -f     The names refer to functions rather than parameters.  No assignments can be made, and the only other valid flag
              flag -t turns on execution tracing for this function; the flag -T does the same, but turns off tracing on any f
              unless  that  function also has the -t or -T flag.  The -u and -U flags cause the function to be marked for aut
              sion to be suppressed when the function is loaded.  The fpath parameter will be searched to find the function d
              referenced;  see  the section `Functions'. The -k and -z flags make the function be loaded using ksh-style or z
              neither is given, the setting of the KSH AUTOLOAD option determines how the function is loaded.

       -h     Hide: only useful for special parameters (those marked `<S>' in the table in zshparam(1)), and for local parame
              parameter,  though  harmless  for  others.   A special parameter with this attribute will not retain its specia
              `typeset -h PATH', a function containing `typeset PATH' will create an ordinary local parameter without the usu
              the  local  parameter may itself be given this attribute; hence inside a function `typeset -h PATH' creates an 
              cial PATH parameter is not altered in any way.  It is also possible to create a local parameter using `typeset 
              special  will  retain  its special properties regardless of having the -h attribute.  Global special parameters
              those in zsh/mapfile and zsh/parameter) are automatically given the -h attribute to avoid name clashes.

       -H     Hide value: specifies that typeset will not display the value of the parameter when listing parameters; the dis
              if  the  `+'  flag had been given.  Use of the parameter is in other respects normal, and the option does not a
              name, or by pattern with the -m option.  This is on by default for the parameters in the zsh/parameter and zsh/
              unlike the -h flag this is also useful for non-special parameters.

       -i     Use  an internal integer representation.  If n is nonzero it defines the output arithmetic base, otherwise it i
              Bases from 2 to 36 inclusive are allowed.

       -E     Use an internal double-precision floating point representation.  On output the variable will be converted to sc
              it defines the number of significant figures to display; the default is ten.

       -F     Use  an internal double-precision floating point representation.  On output the variable will be converted to f
              nonzero it defines the number of digits to display after the decimal point; the default is ten.

       -l     Convert the result to lower case whenever the parameter is expanded.  The value is not converted when assigned.

       -r     The given names are marked readonly.  Note that if name is a special parameter, the readonly attribute can be t
              off.

       -t     Tags the named parameters.  Tags have no special meaning to the shell.  This flag has a different meaning when 

       -u     Convert  the  result to upper case whenever the parameter is expanded.  The value is not converted when assigne
              when used with -f; see above.

       -x     Mark for automatic export to the environment of subsequently executed commands.  If the option GLOBAL EXPORT is
              unless +g is also explicitly given; in other words the parameter is not made local to the enclosing function.  
              ous versions of zsh.

declare
       Same as typeset.

float [ {+|-}EFHghlprtux ] [ -LRZ [ n ]] [ name[=value] ... ]
       Equivalent to typeset -E, except that options irrelevant to floating point numbers are not permitted.

integer [ {+|-}Hghilprtux ] [ -LRZ [ n ]] [ name[=value] ... ]
       Equivalent to typeset -i, except that options irrelevant to integers are not permitted.

local [ {+|-}AEFHUahlprtux ] [ -LRZi [ n ]] [ name[=value] ] ...
       Same  as  typeset,  except that the options -g, and -f are not permitted.  In this case the -x option does not force t
       will be local to functions.

readonly
       Same as typeset -r.
