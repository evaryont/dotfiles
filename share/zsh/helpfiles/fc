fc [ -e ename ] [ -m match ] [ old=new ... ] [ first [ last ] ]
fc -l [ -nrdfEiD ] [ -t timefmt ] [ -m match ]
      [ old=new ... ] [ first [ last ] ]
fc -p [ -a ] [ filename [ histsize [ savehistsize ] ] ]
fc -P
fc -ARWI [ filename ]
       Select a range of commands from first to last from the history list.  The arguments first and last may be specified as
       number  is used as an offset to the current history event number.  A string specifies the most recent event beginning 
       tions old=new, if any, are then performed on the commands.

       If the -l flag is given, the resulting commands are listed on standard output.  If the -m flag is also given the first
       (should  be  quoted)  and  only the history events matching this pattern will be shown.  Otherwise the editor program 
       these history events.  If ename is not given, the value of the parameter FCEDIT is used; if that is not set the value 
       that is not set a builtin default, usually `vi' is used.  If ename is `-', no editor is invoked.  When editing is comp

       If  first  is  not specified, it will be set to -1 (the most recent event), or to -16 if the -l flag is given.  If las
       first, or to -1 if the -l flag is given.

       The flag -r reverses the order of the commands and the flag -n suppresses command numbers when listing.

       Also when listing,
       -d     prints timestamps for each command
       -f     prints full time-date stamps in the US `MM/DD/YY hh:mm' format
       -E     prints full time-date stamps in the European `dd.mm.yyyy hh:mm' format
       -i     prints full time-date stamps in ISO8601 `yyyy-mm-dd hh:mm' format
       -t fmt prints time and date stamps in the given format; fmt is formatted with the strftime function with the zsh exten
              prompt  format  in  the  section EXPANSION OF PROMPT SEQUENCES in zshmisc(1).  The resulting formatted string m
              will not be printed.
       -D     prints elapsed times; may be combined with one of the options above.

       `fc -p' pushes the current history list onto a stack and switches to a new history list.  If the -a option is also spe
       automatically popped when the current function scope is exited, which is a much better solution than creating a trap f
       no arguments are specified, the history list is left empty, $HISTFILE is unset, and $HISTSIZE & $SAVEHIST are set to t
       is given, $HISTFILE is set to that filename, $HISTSIZE & $SAVEHIST are left unchanged, and the history file is read in
       list.  If a second argument is specified, $HISTSIZE & $SAVEHIST are instead set to the single specified numeric value.
       specified,  $SAVEHIST  is  set  to  a  separate value from $HISTSIZE.  You are free to change these environment values
       desire in order to manipulate the new history list.

       `fc -P' pops the history list back to an older list saved by `fc -p'.  The current list is saved to its $HISTFILE befo
       $HISTFILE  and $SAVEHIST are set appropriately, of course).  The values of $HISTFILE, $HISTSIZE, and $SAVEHIST are res
       -p' was called.  Note that this restoration can conflict with making these variables "local", so your best bet is to a
       variables  in  functions  that use `fc -p'.  The one other guaranteed-safe combination is declaring these variables to
       and using the automatic option (-a) with `fc -p'.  Finally, note that it is legal to manually pop a push marked for au
       before the function exits.

       `fc -R' reads the history from the given file, `fc -W' writes the history out to the given file, and `fc -A' appends t
       no filename is specified, the $HISTFILE is assumed.  If the -I option is added to -R, only those events that are not a
       history  list are added.  If the -I option is added to -A or -W, only those events that are new since last incremental
       appended/written.  In any case, the created file will have no more than $SAVEHIST entries.

history
       Same as fc -l.

r      Same as fc -e -.
