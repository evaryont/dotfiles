functions [ {+|-}UXkmtTuz ] [ name ... ]
functions -M mathfn [ min [ max [ shellfn ] ] ]
functions -M [ -m pattern ... ]
functions +M [ -m ] mathfn
       Equivalent to typeset -f, with the exception of the -M option.  Use of the -M option may not be combined with any of t

       functions -M mathfn defines mathfn as the name of a mathematical function recognised in all forms of arithmetical expr
       Evaluation' in zshmisc(1).  By default mathfn may take any number of comma-separated arguments.  If min is given, it m
       max are both given, it must have at least min and at most max args.  max may be -1 to indicate that there is no upper 

       By default the function is implemented by a shell function of the same name; if shellfn is specified it gives the name
       while  mathfn remains the name used in arithmetical expressions.  The name of the function in $0 is mathfn (not shellf
       vided the option FUNCTION ARGZERO is in effect.  The positional parameters in the shell function correspond to the arg
       call.   The result of the last arithmetical expression evaluated inside the shell function (even if it is a form that 
       the result of the mathematical function.

       functions -M with no arguments lists all such user-defined functions in the same form as a definition.  With the addit
       ments, all functions whose mathfn matches one of the pattern arguments are listed.

       function  +M removes the list of mathematical functions; with the additional option -m the arguments are treated as pa
       matches the pattern are removed.  Note that the shell function implementing the behaviour is not removed (regardless o
       mathfn).

       For example, the following prints the cube of 3:

              zmath cube() { (( $1 * $1 * $1 )) }
              functions -M cube 1 1 zmath cube
              print $(( cube(3) ))

autoload [ {+|-}UXkmtz ] [ -w ] [ name ... ]
       Equivalent to functions -u, with the exception of -X/+X and -w.

       The  flag  -X may be used only inside a shell function, and may not be followed by a name.  It causes the calling func
       then immediately loaded and executed, with the current array of positional parameters as arguments.  This replaces the
       If no function definition is found, an error is printed and the function remains undefined and marked for autoloading.

       The  flag +X attempts to load each name as an autoloaded function, but does not execute it.  The exit status is zero (
       viously defined and a definition for it was found.  This does not replace any existing definition of the function.  Th
       the  function  was  already  defined  or  when  no definition was found.  In the latter case the function remains unde
       ksh-style autoloading is enabled, the function created will contain the contents of the file plus a call to the functi
       normal  ksh  autoloading  behaviour  on  the  first call to the function.  If the -m flag is also given each name is t
       already marked for autoload that match the pattern are loaded.

       With the -w flag, the names are taken as names of files compiled with the zcompile builtin, and all functions defined 

       The flags -z and -k mark the function to be autoloaded using the zsh or ksh style, as if the option KSH AUTOLOAD were 
       flags override the setting of the option at the time the function is loaded.

       Note that the autoload command makes no attempt to ensure the shell options set during the loading or execution of the
       this, the emulate command can be used:

              emulate zsh -c 'autoload -Uz func'

       arranges that when func is loaded the shell is in native zsh emulation, and this emulation is also applied when func i
