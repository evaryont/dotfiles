#!/bin/zsh
# Helpful/Useful functions
cl()      { cd $1 && ls -a }        # cd && ls
# grep the history
  greph () { history 0 G $1 }

  # Found in the mailing list archive from Zsh (IIRC ~1996)
  selhist() {
        emulate -L zsh
        local TAB=$'\t';
        (( $# < 1 )) && {
                echo "Usage: $0 command"
                return 1
        };
        cmd=(${(f)"$(grep -w $1 $HISTFILE | sort | uniq | pr -tn)"})
        print -l $cmd | less -F
        echo -n "enter number of desired command [1 - $(( ${#cmd[@]} - 1 ))]: "
        local answer
        read answer
        print -z "${cmd[$answer]#*$TAB}"
  }

# mkdir && cd
mcd() { mkdir -p "$@"; cd "$@" }

# Display path in titlebar of terms.
# Automagical function called every time there is a path change (that I called, not within 
# another script)
chpwd() {
	[[ -t 1 ]] || return 0
	case $TERM in
		*xterm*|rxvt|(dt|k|E)term)
			print -Pn "\e]2;%~@$(hostname)\a"
		;;
	esac
}
# }}}

# aur downloader. Very simple, but complete none the less.
aur() {
	while [ "$1" ] ; do
		echo "Downloading '$1'"
		wget http://aur.archlinux.org/packages/$1/$1.tar.gz
		tar xf $1.tar.gz
		shift
	done
}

#github () { git clone git://github.com/$1/$2.git; mv $2 $1-$2 }

sentenv() { export $1=$2 } # csh compatibility

# rake autocompletion from:
# http://weblog.rubyonrails.org/2006/3/9/fast-rake-task-completion-for-zsh
_rake_does_task_list_need_generating () {
  if [ ! -f .rake_tasks ]; then return 0;
  else
    accurate=$(stat -c%Y .rake_tasks)
    changed=$(stat -c%Y Rakefile)
    return $(expr $accurate '>=' $changed)
  fi
}

_rake () {
  if [ -f Rakefile ]; then
    if _rake_does_task_list_need_generating; then
      echo "\nGenerating .rake_tasks..." > /dev/stderr
      rake --silent --tasks | cut -d " " -f 2 > .rake_tasks
    fi
    compadd `cat .rake_tasks`
  fi
}

# A simple zsh-based bookmarks system (kinda)
name-dir() {
  eval "hash -d ${1}=$(pwd)"
  echo "hash -d ${1}=$(pwd)" >> ${ZHOME}/named_dirs
  echo "~${1}"
}

_force_rehash() {
  (( CURRENT == 1 )) && rehash
  return 1	# Because we didn't really complete anything
}

# Screen + ssh-agent fix (see also: .zsh/alias)
_ssh_auth_save() {
	ln -sf "$SSH_AUTH_SOCK" "$HOME/.screen/ssh-auth-sock.$HOSTNAME"
}
# If I am using vi keys, I want to know what mode I'm currently using.
# zle-keymap-select is executed every time KEYMAP changes.
# From http://zshwiki.org/home/examples/zlewidgets
function zle-keymap-select {
    VIMODE="${${KEYMAP/vicmd/ M:command}/(main|viins)/}"
    zle reset-prompt
}

function ztmpl {
	if [[ $1.tmpl -nt $1 || (! -f $1 && -f $1.tmpl) ]] ; then
		echo "Using $1.tmpl as the template to make $1..."
		local foo="$(print -bP "$(cat $1.tmpl)")"
		echo ${(e)foo} > $1
	fi
}
