" Language Server Protocol and completion popup menu configuration
"
" Makes vim feel a lot more like an IDE.

" don't take over 'completeopt'
let g:asyncomplete_auto_completeopt = 0

" auto close the preview window after the completion menu has been closed
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

" since I'm using <tab> for the completion menu, a different keybinding is
" used for explicit, skip-the-menu expansion
let g:UltiSnipsExpandTrigger = "<c-t>"
" let g:UltiSnipsExpandTrigger = "<tab>"
" let g:UltiSnipsJumpForwardTrigger = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" Use <TAB> to scroll the popup menu
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? "\<C-y>" : "\<CR>"
" Ctrl-Space will force the popup menu
imap <c-space> <Plug>(asyncomplete_force_refresh)

" {{{ register all of the sources for asyncomplete.vim
augroup asyncomplete_registrations
  autocmd!

  " NB: the asyncomplete-lsp plugin automatically registers for all
  " appropriate languages

  " UltiSnips for text abbreviation expansion
  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
      \ 'name': 'ultisnips',
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
      \ }))

  " tags file source, this is generated by gutentags automatically
  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
      \ 'name': 'tags',
      \ 'whitelist': ['*'],
      \ 'completor': function('asyncomplete#sources#tags#completor'),
      \ }))

  " reuse text in the buffer a little more easily
  au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
    \ 'name': 'buffer',
    \ 'allowlist': ['*'],
    \ 'completor': function('asyncomplete#sources#buffer#completor'),
    \ }))


augroup END
" }}}

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> gR <plug>(lsp-rename)
    nmap <buffer> [g <Plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <Plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nmap <buffer> <silent> gQ <plug>(lsp-document-range-format)
    xmap <buffer> <silent> gQ <plug>(lsp-document-range-format)

    setlocal foldmethod=expr
    setlocal foldexpr=lsp#ui#vim#folding#foldexpr()
    setlocal foldtext=lsp#ui#vim#folding#foldtext()
endfunction

autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()

let g:lsp_fold_enabled = 1

highlight lspReference guibg=#f4c145 guifg=#3d2c00
let g:lsp_highlight_references_delay = 200
let g:lsp_highlight_references_enabled = 0

" Diagnostics UI is minimized -- only a sign and text echoed at the bottom of
" the screen; no highlighting or virtual text
let g:lsp_virtual_text_enabled = 0
let g:lsp_highlights_enabled = 0
let g:lsp_signs_enabled = 1
let g:lsp_diagnostics_echo_cursor = 1

" Use some emoji for the diagnostics signs
let g:lsp_signs_error = {'text': '‚ùó'}
let g:lsp_signs_warning = {'text': '‚ö†Ô∏è'}
let g:lsp_signs_information = {'text': '‚ÑπÔ∏è'}
let g:lsp_signs_hint = {'text': 'üí°'}
